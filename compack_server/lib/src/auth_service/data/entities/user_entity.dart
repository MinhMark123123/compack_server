import 'package:compack_server/src/auth_service/data/models/models.dart';
import 'package:stormberry/stormberry.dart';

// Will be generated by stormberry
part 'user_entity.schema.dart';

@Model(tableName: 'Account')
abstract class UserEntity {
  @PrimaryKey()
  String get id;

  String? get email;

  String? get phone;

  String? get password;

  int? get role;

  String? get token;

  String? get refreshToken;

  DateTime? get timeCreated;

  DateTime? get lastLogonTime;

  DateTime? get lastTimeUpdate;
}

extension AccountEntityViewMapper on UserEntityView {
  User toUser() {
    return User(
      id: id,
      email: email,
      phone: phone,
      role: role,
      token: token,
      refreshToken: refreshToken,
      timeCreated: timeCreated?.toIso8601String(),
      lastLogonTime: lastLogonTime?.toIso8601String(),
      lastTimeUpdate: lastTimeUpdate?.toIso8601String(),
    );
  }
}

extension AccountEntityExtension on User {
  UserEntityInsertRequest toInsertRequest(String password) => UserEntityInsertRequest(
        id: id!,
        email: email,
        phone: phone,
        password: password,
        role: role,
        token: token,
        refreshToken: refreshToken,
        timeCreated: _getTime(timeCreated),
        lastLogonTime: _getTime(lastLogonTime),
        lastTimeUpdate: _getTime(lastTimeUpdate),
      );

  UserEntityUpdateRequest toUpdateRequest() => UserEntityUpdateRequest(
        id: id!,
        email: email,
        phone: phone,
        role: role,
        token: token,
        refreshToken: refreshToken,
        timeCreated: _getTime(timeCreated),
        lastLogonTime: _getTime(lastLogonTime),
        lastTimeUpdate: _getTime(lastTimeUpdate),
      );

  DateTime? _getTime(String? time) {
    return time == null ? null : DateTime.tryParse(time!);
  }
}
